package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"bookql/db"
	"bookql/graph/model"
	"context"
	"fmt"
	"strings"
)

// Add is the resolver for the add field.
func (r *mutationResolver) Add(ctx context.Context, book model.BookInput) (*model.Book, error) {
	bk := &model.Book{
		Title:      book.Title,
		Author:     book.Author,
		DatePub:    book.DatePub,
		BookCvrImg: book.BookCvrImg,
	}
	//open gorm db connection
	conn := db.Connect()
	//gorm call to insert entry into database
	conn.Table(db.TableName).Create(bk)
	return bk, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	dbr := []map[string]interface{}{}
	var res []*model.Book
	//open gorm db connection
	conn := db.Connect()
	//query table for all records
	conn.Table(db.TableName).Find(&dbr)
	for _, i := range dbr {
		con := &model.Book{
			Title:      i["title"].(string),
			Author:     i["author"].(string),
			DatePub:    i["date_pub"].(string),
			BookCvrImg: i["book_cvr_img"].(string),
		}
		res = append(res, con)
	}
	return res, nil
}

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, search string) (*model.Book, error) {
	cond := make(map[string]interface{})
	cond["title"] = strings.ToLower(search)
	res := map[string]interface{}{}
	//open gorm db connection
	conn := db.Connect()
	//query table for specific record
	conn.Table(db.TableName).Where(cond).Find(&res)
	fmt.Printf("%+v\n", res)
	return &model.Book{
		Title:      res["title"].(string),
		Author:     res["author"].(string),
		DatePub:    res["date_pub"].(string),
		BookCvrImg: res["book_cvr_img"].(string),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
